version: '3'

services:
  frontend:
    container_name: client
    networks:
      - server
    build: ./Frontend/medical-app-frontend
    ports:
      - "80:80"
    volumes:
     - /app/node_modules
     - ./client:/app
     - ./Frontend/medical-app-frontend/default.conf:/etc/nginx/sites-available/default
    depends_on:
     - backend
  backend:
    container_name: backend
    networks:
      - server
      - broker-kafka
      - postgres
    environment:
      DB_HOST: "host.docker.internal"
      DB_PORT: 5433
      DB_USERNAME: 'postgres'
      DB_PASSWORD: 'secret_pass'
      DB_NAME: 'Medical-App-DB'
      JWT_SECRET: 3453mtjm345n63n54inr5mi12fjus
      KAFKA_BROKERCONNECT: kafka:29092
    build: ./Backend/medical-app
    ports:
     - "5000:5000"
    volumes:
     - /app/node_modules
     - ./backend:/app
  neural-server:
    container_name: neural
    restart: always
    depends_on:
      - kafka
    networks:
      - broker-kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    build: ./Backend/medical-neural-py
    volumes:
      - ./neural:/app
  postgres:
    container_name: postgres_container
    image: postgres:latest
    environment:
      POSTGRES_DB: "Medical-App-DB"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "secret_pass"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
        - "5433:5432"
    volumes:
      - ../2. Init Database:/docker-entrypoint-initdb.d
      - medical-app-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d Medical-App-DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - postgres
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: "super@medical.com"
      PGADMIN_DEFAULT_PASSWORD: "rootPassword"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:latest
    networks: 
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
networks: 
  broker-kafka:
    driver: bridge
  postgres:
    driver: bridge
  server:
    driver: bridge
volumes:
  medical-app-volume:
  pgadmin-data:  